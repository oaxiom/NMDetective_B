#!/usr/bin/env python3

'''

A very simple counter for

'''

import sys, os, argparse, logging

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_path, '../'))

import nmdectectiveb

# Command-line options;
def prepare_parser():
    exmp = 'Example usage: nmdetect -g <gtf_file> -l <outputlabel> '

    description = ''

    parser = argparse.ArgumentParser(prog='nmdetect', description=description, epilog=exmp)

    # Optional:
    #optional = parser._action_groups.pop()
    #optional.add_argument('--se', action='store_true', required=False, help='Set mode to SE (single-end) mode, default is paired-end mode')

    required = parser.add_argument_group('required arguments')

    required.add_argument('-g', '--gtf', nargs=1, required=True, help='GTF file to parse (can be in gzip format, detected if .gz is the end of the filename')
    required.add_argument('-l', '--label', nargs=1, required=True, help='a label for the output files')

    #parser._action_groups.append(optional)

    logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')

    parser.log = logging.getLogger('nmdetect')

    return parser

def main():
    assert sys.version_info >= (3, 6), 'Python >=3.6 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log

    log.info('Arguments:')
    log.info(f'  gtf: {args.gtf[0]}')
    log.info(f'  label: {args.label[0]}')

    return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)
